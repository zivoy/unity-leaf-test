// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: colour.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ColourGeneratorClient is the client API for ColourGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColourGeneratorClient interface {
	GetRandColour(ctx context.Context, in *CurrentColour, opts ...grpc.CallOption) (*NewColour, error)
}

type colourGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewColourGeneratorClient(cc grpc.ClientConnInterface) ColourGeneratorClient {
	return &colourGeneratorClient{cc}
}

func (c *colourGeneratorClient) GetRandColour(ctx context.Context, in *CurrentColour, opts ...grpc.CallOption) (*NewColour, error) {
	out := new(NewColour)
	err := c.cc.Invoke(ctx, "/ColourGenerator/GetRandColour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColourGeneratorServer is the server API for ColourGenerator service.
// All implementations must embed UnimplementedColourGeneratorServer
// for forward compatibility
type ColourGeneratorServer interface {
	GetRandColour(context.Context, *CurrentColour) (*NewColour, error)
	mustEmbedUnimplementedColourGeneratorServer()
}

// UnimplementedColourGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedColourGeneratorServer struct {
}

func (UnimplementedColourGeneratorServer) GetRandColour(context.Context, *CurrentColour) (*NewColour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandColour not implemented")
}
func (UnimplementedColourGeneratorServer) mustEmbedUnimplementedColourGeneratorServer() {}

// UnsafeColourGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColourGeneratorServer will
// result in compilation errors.
type UnsafeColourGeneratorServer interface {
	mustEmbedUnimplementedColourGeneratorServer()
}

func RegisterColourGeneratorServer(s grpc.ServiceRegistrar, srv ColourGeneratorServer) {
	s.RegisterService(&ColourGenerator_ServiceDesc, srv)
}

func _ColourGenerator_GetRandColour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentColour)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColourGeneratorServer).GetRandColour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ColourGenerator/GetRandColour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColourGeneratorServer).GetRandColour(ctx, req.(*CurrentColour))
	}
	return interceptor(ctx, in, info, handler)
}

// ColourGenerator_ServiceDesc is the grpc.ServiceDesc for ColourGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ColourGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ColourGenerator",
	HandlerType: (*ColourGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandColour",
			Handler:    _ColourGenerator_GetRandColour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "colour.proto",
}
